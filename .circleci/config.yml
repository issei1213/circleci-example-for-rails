# version: 2.1の新機能
version: 2.1
executors:
default_container:
  docker:
    - image: circleci/ruby:2.6.1-node
      environment:
        RAILS_ENV: test
        BUNDLE_JOBS: 4
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        BUNDLER_VERSION: 2.0.1
    - image: circleci/mysql:5.7-ram
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: true
  working_directory: ~/circleci-example-for-rails

commands:
install_bundler:
  description: Bundler install
  steps:
    - run: gem install bundler -v 2.0.1

jobs:
  fetch_source_code:
    executor:
      name: default_container
    steps:
      - checkout
      - save_cache:
          key: v2-circleci-example-for-rails-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/circleci-example-for-rails
  bundle_dependencies:
    executor:
      name: default_container
    steps:
      - restore_cache:
          key: v2-circleci-example-for-rails-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      - install_bundler
      - run:
          name: Bundle Install Dependencies
          command: |
            bundle install
      - save_cache:
          key: v2-dependencies-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  rspec:
    executor:
      name: default_container
    steps:
      - restore_cache:
          key: v2-circleci-example-for-rails-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Watting stand up database
          command: |
            dockerize -wait \
            tcp://127.0.0.1:3306 -timeout 120s
      # Database setup
      - run: mv ./config/database.yml.ci ./config/database.yml
      - install_bundler
      - run:
          name: Testing DB migration and seed
          command: |
            bundle exec rails db:create db:migrate db:seed db:drop
      - run:
          name: Run rspec
          command: |
            mkdir /tmp/test-results
            mkdir -p ~/rspec
            bundle exec rails db:create db:migrate
            TEST_FILES="$(circleci tests glob \"spec/**/*_spec.rb\" | circleci tests split --split-by=timings)"
            bundle exec rspec --require rails_helper \
                              --color \
                              --format progress \
                              --format RspecJunitFormatter \
                              --out ~/rspec/rspec.xml
      # collect reports
      - store_test_results:
          path: ~/rspec
      - store_artifacts:
          path: ~/tmp/test-results
          destination: test-results
workflow:
build:
  jobs:
    - fetch_source_code
    - bundle_dependencies:
        requires:
          - fetch_source_code
    - rspec:
        requires:
          - bundle_dependencies

# database.ymlをバージョン管理していて、shcema.rbを元にデータベースと連携する場合
# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: circleci/ruby:2.6.1-node
#         environment:
#           RAILS_ENV: test
#       - image: circleci/mysql:5.7-ram
#         environment:
#           MYSQL_ALLOW_EMPTY_PASSWORD: true
#     working_directory: ~/circleci-example-for-rails
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "Gemfile.lock" }}
#             - v1-dependencies-
#       - run:
#           name: install dependencies
#           command: |
#             gem install bundler -v 2.0.1
#             bundle install --jobs=4 --retry=3 --path vendor/bundle
#       - save_cache:
#           paths:
#             - ./vendor/bundle
#           key: v1-dependencies-{{ checksum "Gemfile.lock" }}
#       # Database setup
#       - run:
#           name: Prepare db
#           command: |
#             bin/rails db:create db:migrate
#       # run tests!
#       - run:
#           name: Run rspec
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
#             bundle exec rspec --format progress --color --format documentation

#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results



# # database.ymlをバージョン管理していて、shcema.rbを元にデータベースと連携する場合
# ersion: 2.1
# jobs:
#   build:
#     # Circle CIはdocker上で動かす事できる
#     docker:
#       # Docker HubのimageをPullする
#     - image: circleci/ruby:2.6.1-node
#       environment:
#         RAILS_ENV: test
#     - image: circleci/mysql:5.7-ram
#       environment:
#         MYSQL_ALLOW_EMPTY_PASSWORD: true
#         MYSQL_USER: root
#         MYSQL_DATABASE: circleci-example-for-rails_test
#         MYSQL_ROOT_HOST: "%"
#         MYSQL_PORT: 3306
#     # working_directoryは、処理を実行するディレクトリを指定する(リポジトリ名もしくはプロジェクト名と同じにするのが慣例)
#     working_directory: ~/circleci-example-for-rails
#     # stepsは、コンテナ内で実行される処理の一つ一つをまとめたもので、stepはその一つ一つの処理のこと(ジョブを定義する際には必ずstepsもセットで定義する必要がある)
#     steps:
#       # check_outは、連携したGitHubのリポジトリからビルドしたコンテナ内にソースコードをコピーします
#     - checkout
#     # restore_cacheは、save_cacheされたキャッシュを復元させる機能。
#     - restore_cache:
#         keys:
#         - v1-dependencies-{{ checksum "Gemfile.lock" }}
#         - v1-dependencies-
#     # runは、実行させたい処理(フレームワーク独自のコマンドやライブラリのインストールなど)を具体的に記述する
#     - run:
#         name: install dependencies
#         command: |
#           gem install bundler -v 2.0.1
#           bundle install --jobs=4 --retry=3 --path vendor/bundle
#     # CircleCIではジョブ内で実行したstepをキャッシュとして保存できるsave_cacheという機能があ
#     - save_cache:
#         # pathオプションでキャッシュ対象のファイル群があるpathを指定
#         paths:
#         - ./vendor/bundle
#         key: v1-dependencies-{{ checksum "Gemfile.lock" }}
#     # Database setup
#     - run:
#         name: Prepare db
#         command: |
#           bin/rails db:schema:load --trace
#     # run tests!
#     - run:
#         name: Run rspec
#         command: |
#           mkdir /tmp/test-results
#           TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
#           bundle exec rspec --format progress --color --format documentation

#     # collect reports
#     # store_test_resultsは、RSpecなどのテストを実行した際の結果をCircleCI上にアップロードする機能
#     - store_test_results:
#         path: /tmp/test-results
#     # store_artifictsは、ログデータなどをCircleCI上にアップロードする機能。
#     - store_artifacts:
#         path: /tmp/test-results
#         destination: test-results
